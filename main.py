import random
import sqlite3
import types
import telebot

TOKEN = None
with open('token.txt') as f:
    TOKEN = f.read().strip()
bot = telebot.TeleBot(TOKEN)

conn = sqlite3.connect('database.db', check_same_thread=False)
cursor = conn.cursor()

comments_for_right_answers = ['–ü—Ä–∞–≤–∏–ª—å–Ω–æ!', '–í–µ—Ä–Ω–æ!', '–ú–æ–ª–æ–¥–µ—Ü! üòâ', '–í–∞—É, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üî•',
                              '–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ!', '–ö–ª–∞—Å—Å, –≤—Å–µ –≤–µ—Ä–Ω–æ!', '–û—Ç–ª–∏—á–Ω–æ! üëç', '–í—Å–µ –≤–µ—Ä–Ω–æ!',
                              '–î–∞, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™']

comments_for_incorrect_answers = ['–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑', '–ù–µ —Å–æ–≤—Å–µ–º...',
                                  '–ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫. –°–¥–µ–ª–∞–π –µ—â–µ –ø–æ–ø—ã—Ç–∫—É üòâ']

#functions for queries
def execute_one_query(query):
    cursor.execute(query)
    result = cursor.fetchone()
    return result

def execute_many_queries(query):
    cursor.execute(query)
    result = cursor.fetchall()
    return result

#start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    random = types.KeyboardButton('–†–∞–Ω–¥–æ–º–Ω–æ–µ —Å–ª–æ–≤–æ')
    random_10 = types.KeyboardButton('10 —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Å–ª–æ–≤')
    train_rus = types.KeyboardButton('–ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è (rus-eng)')
    train_eng = types.KeyboardButton('–ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è (eng-rus)')

    markup.add(random, random_10, train_rus, train_eng)

    mess = f'–ü—Ä–∏–≤–µ—Ç! 2 000 –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –ø–æ–∫—Ä—ã–≤–∞—é—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 80-90% —É—Å—Ç–Ω–æ–π —Ä–µ—á–∏. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–∞–ø–æ–º–Ω–∏–≤ –≤—Å–µ–≥–æ ' \
           f'2 000 —Å–ª–æ–≤, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å –ª–µ–≥–∫–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç–µ–º—ã. ' \
           f'–ò–∑—É—á–∞—è –≤—Å–µ–≥–æ –ø–æ 10 —Å–ª–æ–≤ –≤ –¥–µ–Ω—å, –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Å–≤–æ–∏—Ç—å –≤—Å–µ 2 000 —Å–ª–æ–≤ –ø—Ä–∏–º–µ—Ä–Ω–æ –∑–∞ –ø–æ–ª–≥–æ–¥–∞. ' \
           f'–ê —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ —ç—Ç–æ–º. –£–¥–∞—á–∏! ' \
           f'–ò –≥–ª–∞–≤–Ω–æ–µ –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –Ω—É–∂–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Ö–æ—Ç—è –±—ã –ø–æ 5 –º–∏–Ω—É—Ç üòâ' \
           f'–í—ã–±–µ—Ä–∏ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ üëá'
    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)

#main commands (menu)
@bot.message_handler(content_types=['text'])
def mess(message):
    get_message_bot = message.text.strip().lower()
    if get_message_bot == '—Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Å–ª–æ–≤–æ':
        select_words = "SELECT eng, rus FROM english_words ORDER BY RANDOM() LIMIT 1"
        words = execute_one_query(select_words)
        final_message = f"{words[0]} - {words[1]}"
        bot.send_message(message.chat.id, final_message, parse_mode='html')

    elif get_message_bot == '10 —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Å–ª–æ–≤':
        select_words = "SELECT eng, rus FROM english_words ORDER BY RANDOM() LIMIT 10"
        words = execute_many_queries(select_words)
        final_message = ""
        for word in words:
            final_message += f"{word[0]} - {word[1]} \n"
        bot.send_message(message.chat.id, final_message, parse_mode='html')

    elif get_message_bot == '–ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è (rus-eng)':
        select_words = "SELECT eng, rus FROM english_words ORDER BY RANDOM() LIMIT 1"
        words = execute_one_query(select_words)
        rus_word = f"{words[1]}"
        msg = bot.send_message(message.chat.id, rus_word, parse_mode='html')
        bot.register_next_step_handler(msg, verify_rus_eng_answer, words)

    elif get_message_bot == '–ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è (eng-rus)':
        select_words = "SELECT eng, rus FROM english_words ORDER BY RANDOM() LIMIT 1"
        words = execute_one_query(select_words)
        eng_word = f"{words[0]}"
        msg = bot.send_message(message.chat.id, eng_word, parse_mode='html')
        bot.register_next_step_handler(msg, verify_eng_rus_answer, words)
    else:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ üëá', parse_mode='html')

#train rus-eng
def get_rus_eng_answer(message, select_words):
    get_words = select_words
    msg = bot.send_message(message.chat.id, get_words[1], parse_mode='html')
    bot.register_next_step_handler(msg, verify_rus_eng_answer, get_words)

def verify_rus_eng_answer(message, verify_words):
    get_words = verify_words
    if message.text.strip().lower() == get_words[0]:
        bot.send_message(message.chat.id, random.choice(comments_for_right_answers), parse_mode='html')
    elif message.text.strip().lower() == '—Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Å–ª–æ–≤–æ':
        mess(message)
    elif message.text.strip().lower() == '10 —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Å–ª–æ–≤':
        mess(message)
    elif message.text.strip().lower() == '–ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è (rus-eng)':
        mess(message)
    elif message.text.strip().lower() == '–ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è (eng-rus)':
        mess(message)
    else:
        bot.send_message(message.chat.id, random.choice(comments_for_incorrect_answers), parse_mode='html')
        get_rus_eng_answer(message, get_words)

#train eng-rus
def get_eng_rus_answer(message, select_words):
    get_words = select_words
    msg = bot.send_message(message.chat.id, get_words[0], parse_mode='html')
    bot.register_next_step_handler(msg, verify_eng_rus_answer, get_words)

def verify_eng_rus_answer(message, verify_words):
    get_words = verify_words
    if message.text.strip().lower() in get_words[1].split(sep=','):
        bot.send_message(message.chat.id, random.choice(comments_for_right_answers), parse_mode='html')
    elif message.text.strip().lower() == '—Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Å–ª–æ–≤–æ':
        mess(message)
    elif message.text.strip().lower() == '10 —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Å–ª–æ–≤':
        mess(message)
    elif message.text.strip().lower() == '–ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è (rus-eng)':
        mess(message)
    elif message.text.strip().lower() == '–ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è (eng-rus)':
        mess(message)
    else:
        bot.send_message(message.chat.id, random.choice(comments_for_incorrect_answers), parse_mode='html')
        get_eng_rus_answer(message, get_words)

bot.polling(none_stop=True)